/**
 * Script de Test Automatis√© - Permis de Travail en Hauteur
 * 
 * Instructions d'utilisation:
 * 1. Ouvrir http://localhost:5174 dans le navigateur
 * 2. Se connecter comme Prestataire
 * 3. Ouvrir la console d√©veloppeur (F12)
 * 4. Coller ce script et l'ex√©cuter
 * 5. Suivre les instructions affich√©es
 */

console.log('üöÄ D√©marrage des tests - Permis de Travail en Hauteur');
console.log('====================================================');

// Configuration des tests
const TEST_CONFIG = {
  baseUrl: 'http://localhost:5174',
  testData: {
    prestataire: 'ACME Construction SARL',
    description: 'Installation d\'antennes sur pyl√¥ne de 35 m√®tres',
    codeSite: 'ANT-007',
    region: 'Analamanga',
    nombreIntervenants: 3,
    hauteurChute: '8-40m', // Pour tester la logique > 20m
    travailToiture: true,
    typePente: 'forte'
  }
};

// Fonction utilitaire pour attendre
const wait = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// Fonction pour v√©rifier si un √©l√©ment existe
const elementExists = (selector) => {
  return document.querySelector(selector) !== null;
};

// Fonction pour v√©rifier le texte d'un √©l√©ment
const getElementText = (selector) => {
  const element = document.querySelector(selector);
  return element ? element.textContent.trim() : null;
};

// Fonction pour v√©rifier si un checkbox est coch√©
const isCheckboxChecked = (selector) => {
  const checkbox = document.querySelector(selector);
  return checkbox ? checkbox.checked : false;
};

// Fonction pour simuler un clic
const clickElement = (selector) => {
  const element = document.querySelector(selector);
  if (element) {
    element.click();
    return true;
  }
  return false;
};

// Fonction pour remplir un champ
const fillField = (selector, value) => {
  const field = document.querySelector(selector);
  if (field) {
    field.value = value;
    field.dispatchEvent(new Event('input', { bubbles: true }));
    field.dispatchEvent(new Event('change', { bubbles: true }));
    return true;
  }
  return false;
};

// Test 1: V√©rification de la page d'accueil
async function testPageLoad() {
  console.log('\nüìã Test 1: V√©rification de la page d\'accueil');
  
  // V√©rifier que nous sommes sur la bonne page
  if (window.location.href.includes('localhost:5174')) {
    console.log('‚úÖ Page charg√©e correctement');
  } else {
    console.log('‚ùå Mauvaise URL:', window.location.href);
    return false;
  }
  
  // V√©rifier la pr√©sence d'√©l√©ments de base
  const hasLogin = elementExists('input[type="email"]') || elementExists('button[type="submit"]');
  if (hasLogin) {
    console.log('‚úÖ Page de connexion d√©tect√©e');
    console.log('‚ö†Ô∏è  Veuillez vous connecter comme Prestataire avant de continuer');
    return 'login_required';
  }
  
  return true;
}

// Test 2: Navigation vers le formulaire de permis
async function testNavigationToForm() {
  console.log('\nüìã Test 2: Navigation vers le formulaire de permis');
  
  // Chercher le lien ou bouton pour cr√©er un permis de hauteur
  const possibleSelectors = [
    'a[href*="hauteur"]',
    'button:contains("hauteur")',
    'a:contains("Permis")',
    'button:contains("Nouveau")',
    'a:contains("Cr√©er")'
  ];
  
  let found = false;
  for (const selector of possibleSelectors) {
    if (elementExists(selector)) {
      console.log(`‚úÖ √âl√©ment trouv√©: ${selector}`);
      found = true;
      break;
    }
  }
  
  if (!found) {
    console.log('‚ùå Impossible de trouver le lien vers le formulaire de permis');
    console.log('üîç √âl√©ments disponibles sur la page:');
    const links = document.querySelectorAll('a, button');
    links.forEach((el, i) => {
      if (i < 10) { // Limiter l'affichage
        console.log(`  - ${el.tagName}: "${el.textContent.trim()}"`);
      }
    });
    return false;
  }
  
  return true;
}

// Test 3: V√©rification de l'√©tape 1 - Champs conformes au PDF
async function testStep1Fields() {
  console.log('\nüìã Test 3: V√©rification de l\'√©tape 1 - Champs conformes au PDF');
  
  const expectedFields = [
    { selector: 'select, input[type="text"]', label: 'Plan de pr√©vention' },
    { selector: 'input[placeholder*="prestataire"], input[placeholder*="entreprise"]', label: 'Prestataires' },
    { selector: 'input[type="date"]', label: 'Dates (d√©but/fin)' },
    { selector: 'textarea', label: 'Description op√©ration' },
    { selector: 'input[placeholder*="ANT"]', label: 'Nom du site' },
    { selector: 'input[placeholder*="Analamanga"]', label: 'R√©gion' },
    { selector: 'input[type="number"]', label: 'Nombre d\'intervenants' },
    { selector: 'select', label: 'Hauteur de chute potentielle' }
  ];
  
  let allFieldsFound = true;
  
  for (const field of expectedFields) {
    if (elementExists(field.selector)) {
      console.log(`‚úÖ ${field.label}: trouv√©`);
    } else {
      console.log(`‚ùå ${field.label}: manquant`);
      allFieldsFound = false;
    }
  }
  
  // V√©rifier les libell√©s sp√©cifiques
  const pageText = document.body.textContent;
  const expectedLabels = [
    'Hauteur de chute potentielle',
    'Description de l\'op√©ration / travaux',
    'Prestataires - Sous-traitants',
    'Nom du site'
  ];
  
  for (const label of expectedLabels) {
    if (pageText.includes(label)) {
      console.log(`‚úÖ Libell√© correct: "${label}"`);
    } else {
      console.log(`‚ùå Libell√© manquant ou incorrect: "${label}"`);
      allFieldsFound = false;
    }
  }
  
  return allFieldsFound;
}

// Test 4: V√©rification des options de hauteur
async function testHeightOptions() {
  console.log('\nüìã Test 4: V√©rification des options de hauteur');
  
  const expectedOptions = [
    'Hauteur ‚â§ 3m',
    '3m < hauteur ‚â§ 8m',
    '8m < hauteur ‚â§ 40m',
    'Hauteur > 40m'
  ];
  
  const pageText = document.body.textContent;
  let allOptionsFound = true;
  
  for (const option of expectedOptions) {
    if (pageText.includes(option)) {
      console.log(`‚úÖ Option correcte: "${option}"`);
    } else {
      console.log(`‚ùå Option manquante ou incorrecte: "${option}"`);
      allOptionsFound = false;
    }
  }
  
  return allOptionsFound;
}

// Test 5: V√©rification des options de pente
async function testSlopeOptions() {
  console.log('\nüìã Test 5: V√©rification des options de pente');
  
  const expectedSlopes = [
    'Toit plat',
    'L√©g√®re pente < 20¬∞',
    'Forte pente ‚â• 20¬∞ et < 45¬∞',
    'Tr√®s forte pente ‚â• 45¬∞ et < 60¬∞',
    'Pente extr√™me ‚â• 60¬∞'
  ];
  
  const pageText = document.body.textContent;
  let allSlopesFound = true;
  
  for (const slope of expectedSlopes) {
    if (pageText.includes(slope)) {
      console.log(`‚úÖ Option de pente correcte: "${slope}"`);
    } else {
      console.log(`‚ùå Option de pente manquante: "${slope}"`);
      allSlopesFound = false;
    }
  }
  
  return allSlopesFound;
}

// Test 6: V√©rification des risques (√©tape 2)
async function testRisksStep2() {
  console.log('\nüìã Test 6: V√©rification des risques (√©tape 2)');
  
  const expectedRisks = [
    'Effondrement',
    'Incendie',
    'D√©versement accidentel',
    'Electrisation / Electrocution',
    'Chute de personnes',
    'Blessure (coupure‚Ä¶)',
    'Chute d\'objet',
    'Exposition aux substances dangereuses',
    'Ecrasement',
    'Mauvaise condition m√©t√©orologique'
  ];
  
  const pageText = document.body.textContent;
  let allRisksFound = true;
  
  for (const risk of expectedRisks) {
    if (pageText.includes(risk)) {
      console.log(`‚úÖ Risque correct: "${risk}"`);
    } else {
      console.log(`‚ùå Risque manquant ou incorrect: "${risk}"`);
      allRisksFound = false;
    }
  }
  
  return allRisksFound;
}

// Test 7: V√©rification des mat√©riels (√©tape 3)
async function testMaterialsStep3() {
  console.log('\nüìã Test 7: V√©rification des mat√©riels (√©tape 3)');
  
  const expectedMaterials = [
    'Echafaudage roulant',
    'Echafaudage fixe',
    'Filet de s√©curit√©',
    'Ligne de vie verticale',
    'Ligne de vie horizontale',
    'Point d\'ancrage',
    'Echelle crinoline', // Important: pas "√† crinoline"
    'Plateforme √©l√©vatrice',
    'Travail sur cordes',
    'Echelle',
    'Escabeau'
  ];
  
  const pageText = document.body.textContent;
  let allMaterialsFound = true;
  
  for (const material of expectedMaterials) {
    if (pageText.includes(material)) {
      console.log(`‚úÖ Mat√©riel correct: "${material}"`);
    } else {
      console.log(`‚ùå Mat√©riel manquant ou incorrect: "${material}"`);
      allMaterialsFound = false;
    }
  }
  
  return allMaterialsFound;
}

// Test 8: V√©rification des mesures de pr√©vention (√©tape 4)
async function testPreventionMeasuresStep4() {
  console.log('\nüìã Test 8: V√©rification des mesures de pr√©vention (√©tape 4)');
  
  const expectedMeasures = [
    'Personnel habilit√© (form√© et comp√©tent)',
    'Personnel apte m√©dicalement',
    'Balisage de la zone de travaux',
    'Chaussures de s√©curit√©',
    'Casque avec jugulaire',
    'Gants de peinture nitrile',
    'Gants isolant √©lectrique',
    'Gants de manutention',
    'Bouchon d\'oreille',
    'Casque anti-bruit',
    'Longe avec absorbeur',
    'Double longe',
    'Lignes de vie conforme',
    'Harnais v√©rifi√© et conforme',
    'Echafaudage contr√¥l√© et conforme',
    'Echelle en bon √©tat (barreaux, montants, patins antid√©rapants)',
    'Sanglage des outils',
    'Travail √† 2 obligatoire',
    'Mesure de la vitesse du vent'
  ];
  
  const pageText = document.body.textContent;
  let allMeasuresFound = true;
  
  for (const measure of expectedMeasures) {
    if (pageText.includes(measure)) {
      console.log(`‚úÖ Mesure correcte: "${measure}"`);
    } else {
      console.log(`‚ùå Mesure manquante ou incorrecte: "${measure}"`);
      allMeasuresFound = false;
    }
  }
  
  return allMeasuresFound;
}

// Test 9: V√©rification de l'engagement (√©tape 5)
async function testEngagementStep5() {
  console.log('\nüìã Test 9: V√©rification de l\'engagement (√©tape 5)');
  
  const engagementText = 'En tant que demandeur de ce permis, je m\'engage √† respecter la mise en ≈ìuvre des mesures de pr√©vention mentionn√©es √† chaque d√©but de travaux impliquant un travail en hauteur';
  
  const pageText = document.body.textContent;
  
  if (pageText.includes(engagementText)) {
    console.log('‚úÖ Texte d\'engagement complet trouv√©');
    return true;
  } else {
    console.log('‚ùå Texte d\'engagement manquant ou incomplet');
    console.log('üîç Texte recherch√©:', engagementText);
    return false;
  }
}

// Test 10: V√©rification du message d'avertissement plan de sauvetage
async function testSauvetageWarning() {
  console.log('\nüìã Test 10: V√©rification du message d\'avertissement plan de sauvetage');
  
  const warningText = 'Le plan de sauvetage est obligatoire pour les travaux en hauteur sup√©rieure √† 20 m√®tres';
  const pageText = document.body.textContent;
  
  if (pageText.includes(warningText)) {
    console.log('‚úÖ Message d\'avertissement trouv√©');
    return true;
  } else {
    console.log('‚ùå Message d\'avertissement manquant');
    console.log('üîç Message recherch√©:', warningText);
    return false;
  }
}

// Test 11: V√©rification du r√©capitulatif
async function testSummary() {
  console.log('\nüìã Test 11: V√©rification du r√©capitulatif');
  
  const expectedSummaryFields = [
    'Plan de pr√©vention',
    'Prestataire',
    'P√©riode',
    'Site',
    'Op√©ration',
    'Intervenants',
    'Hauteur de chute potentielle',
    'Travail en toiture'
  ];
  
  const pageText = document.body.textContent;
  let allSummaryFieldsFound = true;
  
  for (const field of expectedSummaryFields) {
    if (pageText.includes(field)) {
      console.log(`‚úÖ Champ r√©capitulatif: "${field}"`);
    } else {
      console.log(`‚ùå Champ r√©capitulatif manquant: "${field}"`);
      allSummaryFieldsFound = false;
    }
  }
  
  return allSummaryFieldsFound;
}

// Test 12: Test de validation des champs obligatoires
async function testRequiredFieldsValidation() {
  console.log('\nüìã Test 12: Test de validation des champs obligatoires');
  
  // Essayer de soumettre sans remplir les champs
  const submitButton = document.querySelector('button[type="submit"], button:contains("Suivant"), button:contains("Soumettre")');
  
  if (submitButton) {
    submitButton.click();
    await wait(1000);
    
    // V√©rifier la pr√©sence de messages d'erreur
    const errorMessages = document.querySelectorAll('.error, .text-red-500, [class*="error"]');
    
    if (errorMessages.length > 0) {
      console.log(`‚úÖ Messages d'erreur d√©tect√©s: ${errorMessages.length}`);
      errorMessages.forEach((error, i) => {
        if (i < 5) { // Limiter l'affichage
          console.log(`  - ${error.textContent.trim()}`);
        }
      });
      return true;
    } else {
      console.log('‚ùå Aucun message d\'erreur d√©tect√©');
      return false;
    }
  } else {
    console.log('‚ùå Bouton de soumission non trouv√©');
    return false;
  }
}

// Fonction principale de test
async function runAllTests() {
  console.log('üéØ D√©marrage de la suite de tests compl√®te');
  console.log('==========================================');
  
  const results = {
    total: 0,
    passed: 0,
    failed: 0,
    skipped: 0
  };
  
  const tests = [
    { name: 'Chargement de page', fn: testPageLoad },
    { name: 'Navigation vers formulaire', fn: testNavigationToForm },
    { name: 'Champs √©tape 1', fn: testStep1Fields },
    { name: 'Options de hauteur', fn: testHeightOptions },
    { name: 'Options de pente', fn: testSlopeOptions },
    { name: 'Risques √©tape 2', fn: testRisksStep2 },
    { name: 'Mat√©riels √©tape 3', fn: testMaterialsStep3 },
    { name: 'Mesures pr√©vention √©tape 4', fn: testPreventionMeasuresStep4 },
    { name: 'Engagement √©tape 5', fn: testEngagementStep5 },
    { name: 'Message sauvetage', fn: testSauvetageWarning },
    { name: 'R√©capitulatif', fn: testSummary },
    { name: 'Validation champs obligatoires', fn: testRequiredFieldsValidation }
  ];
  
  for (const test of tests) {
    try {
      results.total++;
      console.log(`\nüß™ Ex√©cution: ${test.name}`);
      
      const result = await test.fn();
      
      if (result === 'login_required') {
        console.log('‚è≠Ô∏è  Test ignor√© - Connexion requise');
        results.skipped++;
      } else if (result === true) {
        console.log(`‚úÖ ${test.name}: R√âUSSI`);
        results.passed++;
      } else {
        console.log(`‚ùå ${test.name}: √âCHEC`);
        results.failed++;
      }
    } catch (error) {
      console.log(`üí• ${test.name}: ERREUR - ${error.message}`);
      results.failed++;
    }
    
    await wait(500); // Pause entre les tests
  }
  
  // R√©sum√© final
  console.log('\nüìä R√âSUM√â DES TESTS');
  console.log('===================');
  console.log(`Total: ${results.total}`);
  console.log(`‚úÖ R√©ussis: ${results.passed}`);
  console.log(`‚ùå √âchecs: ${results.failed}`);
  console.log(`‚è≠Ô∏è  Ignor√©s: ${results.skipped}`);
  console.log(`üìà Taux de r√©ussite: ${Math.round((results.passed / (results.total - results.skipped)) * 100)}%`);
  
  if (results.failed === 0) {
    console.log('\nüéâ TOUS LES TESTS SONT PASS√âS !');
    console.log('Le formulaire est conforme au PDF de r√©f√©rence.');
  } else {
    console.log('\n‚ö†Ô∏è  Certains tests ont √©chou√©.');
    console.log('V√©rifiez les d√©tails ci-dessus pour identifier les probl√®mes.');
  }
  
  return results;
}

// Instructions d'utilisation
console.log('\nüìñ INSTRUCTIONS D\'UTILISATION:');
console.log('==============================');
console.log('1. Assurez-vous d\'√™tre connect√© comme Prestataire');
console.log('2. Naviguez vers le formulaire de permis de travail en hauteur');
console.log('3. Ex√©cutez: runAllTests()');
console.log('4. Consultez les r√©sultats dans la console');
console.log('\nüí° Pour ex√©cuter tous les tests maintenant, tapez: runAllTests()');

// Exporter les fonctions pour utilisation manuelle
window.testPermisHauteur = {
  runAllTests,
  testPageLoad,
  testStep1Fields,
  testHeightOptions,
  testSlopeOptions,
  testRisksStep2,
  testMaterialsStep3,
  testPreventionMeasuresStep4,
  testEngagementStep5,
  testSauvetageWarning,
  testSummary,
  testRequiredFieldsValidation
};

console.log('\nüîß Fonctions disponibles:');
console.log('- testPermisHauteur.runAllTests() : Ex√©cuter tous les tests');
console.log('- testPermisHauteur.testStep1Fields() : Tester l\'√©tape 1');
console.log('- testPermisHauteur.testEngagementStep5() : Tester l\'engagement');
console.log('- etc...');


